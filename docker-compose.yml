version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: sihui-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${DB_NAME:-sihui_db}
      MYSQL_USER: ${DB_USERNAME:-sihui_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sihui123}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./config/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./sihui-backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - sihui-network
    command: --default-authentication-plugin=mysql_native_password
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: sihui-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sihui-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spring Boot后端
  backend:
    build:
      context: ./sihui-backend
      dockerfile: Dockerfile
    image: sihui-backend:latest
    container_name: sihui-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-production}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME:-sihui_db}?useSSL=false&serverTimezone=UTC&characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME:-sihui_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-sihui123}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_at_least_256_bits_long}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400}
      ALIYUN_OSS_ENDPOINT: ${ALIYUN_OSS_ENDPOINT}
      ALIYUN_OSS_BUCKET: ${ALIYUN_OSS_BUCKET}
      ALIYUN_OSS_ACCESS_KEY: ${ALIYUN_OSS_ACCESS_KEY}
      ALIYUN_OSS_SECRET_KEY: ${ALIYUN_OSS_SECRET_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      DEEPSEEK_API_URL: ${DEEPSEEK_API_URL:-https://api.deepseek.com/v1}
      LOGGING_LEVEL_ROOT: ${APP_LOG_LEVEL:-INFO}
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - sihui-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Vue3管理后台
  frontend:
    build:
      context: ./sihui-admin
      dockerfile: Dockerfile
    image: sihui-frontend:latest
    container_name: sihui-frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8080/api}
      VITE_APP_TITLE: ${VITE_APP_TITLE:-四会培训平台管理后台}
    volumes:
      - frontend_dist:/usr/share/nginx/html
    networks:
      - sihui-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: sihui-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - frontend_dist:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    networks:
      - sihui-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: sihui-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sihui-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: sihui-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sihui-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  frontend_dist:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sihui-network:
    driver: bridge 